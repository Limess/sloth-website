<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Usage on Sloth</title><link>https://sloth.dev/usage/</link><description>Recent content in Usage on Sloth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sloth.dev/usage/index.xml" rel="self" type="application/rss+xml"/><item><title>CLI generate</title><link>https://sloth.dev/usage/cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/usage/cli/</guid><description>generate will generate Prometheus rules in different formats based on the specs.
This mode only needs the CLI so its very useful for GitOps, CI, scripts or as a CLI on your toolbox.
generate command supports multiple spec types and will detect the input spec type based on the spec, accordingly it will generate the output in different formats depending on the loaded spec:
Default spec generates vanilla Prometheus rules.</description></item><item><title>Kubernetes controller</title><link>https://sloth.dev/usage/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/usage/kubernetes/</guid><description>kubernetes-controller command runs Sloth as a controller/operator that will react on sloth.slok.dev/v1/PrometheusServiceLevel CRD.
In the controller mode, Sloth will be running listneing to Kubernetes Sloth SLO CR events and generate the required prometheus-operator CR rules
In the end, the controller mode makes the same work as the CLI however integrates better with a native Kubernetes flow.
Sloth CRD is required
Example:
$ kubectl apply -f ./pkg/kubernetes/gen/crd/sloth.slok.dev_prometheusservicelevels.yaml Prometheus Operator Rules CRD is required</description></item><item><title>SLI plugins</title><link>https://sloth.dev/usage/plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/usage/plugins/</guid><description>SLI plugins are small Go plugins (using Yaegi) that can be loaded on Sloth start.
These plugins can be referenced as an SLI on the SLO specs and will return a raw SLI type.
Common plugins Sloth maintains a library with common SLI plugins that can be used on your SLOs or used as examples to develop your own ones.
Check plugins source code here. Check the documentation here.</description></item><item><title>SLO validation</title><link>https://sloth.dev/usage/slo-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/usage/slo-validation/</guid><description>Sloth validates the spec on generation, however, on specific steps of the SLO generation process, we only want to validate a group of SLOs.
For this purpose Sloth comes with a helpful command called validate. It will discover all the specs recursively and apply the same generation process as generate (including plugins, options&amp;hellip;) but discarding the result.
Example that validates all SLOs in a directory (including subdirectories) and excludes all in spec files that match _gen in the spec path.</description></item></channel></rss>