<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on Sloth</title><link>https://sloth.dev/examples/kubernetes/</link><description>Recent content in Kubernetes on Sloth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sloth.dev/examples/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting started</title><link>https://sloth.dev/examples/kubernetes/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/kubernetes/getting-started/</guid><description>SLO spec # This example shows the same example as getting-started.yml but using Sloth Kubernetes CRD.# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.## `sloth generate -i ./examples/k8s-getting-started.yml`#apiVersion:sloth.slok.dev/v1kind:PrometheusServiceLevelmetadata:name:sloth-slo-my-servicenamespace:monitoringspec:service:&amp;#34;myservice&amp;#34;labels:owner:&amp;#34;myteam&amp;#34;repo:&amp;#34;myorg/myservice&amp;#34;tier:&amp;#34;2&amp;#34;slos:- name:&amp;#34;requests-availability&amp;#34;objective:99.9description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:events:errorQuery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))totalQuery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;pageAlert:labels:severity:pageteamrouting_key:myteamticketAlert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34; Generated ---# Code generated by Sloth (dev): https://github.com/slok/sloth.# DO NOT EDIT.apiVersion:monitoring.coreos.com/v1kind:PrometheusRulemetadata:creationTimestamp:nulllabels:app.kubernetes.io/component:SLOapp.kubernetes.io/managed-by:slothname:sloth-slo-my-servicenamespace:monitoringspec:groups:- name:sloth-slo-sli-recordings-myservice-requests-availabilityrules:- expr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[5m]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[5m])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:5mtier:&amp;#34;2&amp;#34;record:slo:sli_error:ratio_rate5m- expr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[30m]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[30m])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:30mtier:&amp;#34;2&amp;#34;record:slo:sli_error:ratio_rate30m- expr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[1h]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[1h])))labels:cmd:examplesgen.</description></item><item><title>Home WiFi</title><link>https://sloth.dev/examples/kubernetes/home-wifi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/kubernetes/home-wifi/</guid><description>SLO spec # This example shows the same example as home-wifi.yml but using Sloth Kubernetes CRD.# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.## `sloth generate -i ./examples/k8s-home-wifi.yml`#apiVersion:sloth.slok.dev/v1kind:PrometheusServiceLevelmetadata:name:sloth-slo-home-wifinamespace:monitoringlabels:prometheus:prometheusrole:alert-rulesapp:slothspec:service:&amp;#34;home-wifi&amp;#34;labels:cluster:&amp;#34;valhalla&amp;#34;component:&amp;#34;ubiquiti&amp;#34;context:&amp;#34;home&amp;#34;slos:- name:&amp;#34;good-wifi-client-satisfaction&amp;#34;objective:95description:&amp;#34;Will warn us that we don&amp;#39;t have a good wifi at home.&amp;#34;sli:events:errorQuery:sum_over_time((count(unifipoller_client_satisfaction_ratio &amp;lt; 0.75))[{{.window}}:]) OR on() vector(0)totalQuery:sum_over_time((count(unifipoller_client_satisfaction_ratio))[{{.window}}:])alerting:name:GoodWifiClientSatisfactionpageAlert:labels:severity:hometicketAlert:labels:severity:warning- name:&amp;#34;risk-wifi-client-satisfaction&amp;#34;objective:99.9description:&amp;#34;Will warn us that we something very bad is happenning with our home wifi.&amp;#34;sli:events:errorQuery:sum_over_time((count(unifipoller_client_satisfaction_ratio &amp;lt; 0.5))[{{.window}}:]) OR on() vector(0)totalQuery:sum_over_time((count(unifipoller_client_satisfaction_ratio))[{{.window}}:])alerting:name:RiskWifiClientSatisfactionpageAlert:labels:severity:hometicketAlert:labels:severity:warning Generated ---# Code generated by Sloth (dev): https://github.</description></item><item><title>Multi file</title><link>https://sloth.dev/examples/kubernetes/multifile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/kubernetes/multifile/</guid><description>SLO spec ---# This example shows the same example as getting-started.yml but using Sloth Kubernetes CRD and multifile.# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.## `sloth generate -i ./examples/k8s-multifile.yml`#apiVersion:sloth.slok.dev/v1kind:PrometheusServiceLevelmetadata:name:sloth-slo-my-servicenamespace:monitoringspec:service:&amp;#34;myservice&amp;#34;labels:owner:&amp;#34;myteam&amp;#34;repo:&amp;#34;myorg/myservice&amp;#34;tier:&amp;#34;2&amp;#34;slos:- name:&amp;#34;requests-availability&amp;#34;objective:99.9description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:events:errorQuery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))totalQuery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;pageAlert:labels:severity:pageteamrouting_key:myteamticketAlert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34;---apiVersion:sloth.slok.dev/v1kind:PrometheusServiceLevelmetadata:name:sloth-slo-my-service2namespace:monitoringspec:service:&amp;#34;myservice2&amp;#34;labels:owner:&amp;#34;myteam2&amp;#34;repo:&amp;#34;myorg/myservice2&amp;#34;tier:&amp;#34;1&amp;#34;slos:- name:&amp;#34;requests-availability&amp;#34;objective:99.99description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:events:errorQuery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))totalQuery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;pageAlert:labels:severity:pageteamrouting_key:myteamticketAlert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34; Generated ---# Code generated by Sloth (dev): https://github.</description></item><item><title>SLI plugin</title><link>https://sloth.dev/examples/kubernetes/sli-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/kubernetes/sli-plugin/</guid><description>SLO spec # This example shows the same example as home-wifi.yml but using Sloth Kubernetes CRD.# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.## `sloth generate -i ./examples/plugin-k8s-home-wifi.yml` -p ./examples#apiVersion:sloth.slok.dev/v1kind:PrometheusServiceLevelmetadata:name:sloth-slo-home-wifinamespace:monitoringlabels:prometheus:prometheusrole:alert-rulesapp:slothspec:service:&amp;#34;myservice&amp;#34;labels:owner:&amp;#34;myteam&amp;#34;repo:&amp;#34;myorg/myservice&amp;#34;tier:&amp;#34;2&amp;#34;slos:# We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).- name:&amp;#34;requests-availability&amp;#34;objective:99.9description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:plugin:id:&amp;#34;getting_started_availability&amp;#34;options:job:&amp;#34;myservice&amp;#34;filter:&amp;#39;f1=&amp;#34;v1&amp;#34;,f2=&amp;#34;v2&amp;#34;&amp;#39;alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:# Overwrite default Sloth SLO alert summmary on ticket and page alerts.summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;page_alert:labels:severity:pageteamrouting_key:myteamticket_alert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34; Generated ---# Code generated by Sloth (dev): https://github.</description></item></channel></rss>