<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Default on Sloth</title><link>https://sloth.dev/examples/default/</link><description>Recent content in Default on Sloth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sloth.dev/examples/default/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting started</title><link>https://sloth.dev/examples/default/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/getting-started/</guid><description>SLO spec version:&amp;#34;prometheus/v1&amp;#34;service:&amp;#34;myservice&amp;#34;labels:owner:&amp;#34;myteam&amp;#34;repo:&amp;#34;myorg/myservice&amp;#34;tier:&amp;#34;2&amp;#34;slos:# We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).- name:&amp;#34;requests-availability&amp;#34;objective:99.9description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:events:error_query:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))total_query:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:# Overwrite default Sloth SLO alert summmary on ticket and page alerts.summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;page_alert:labels:severity:pageteamrouting_key:myteamticket_alert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34; Generated ---# Code generated by Sloth (dev): https://github.com/slok/sloth.# DO NOT EDIT.groups:- name:sloth-slo-sli-recordings-myservice-requests-availabilityrules:- record:slo:sli_error:ratio_rate5mexpr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[5m]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[5m])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:5mtier:&amp;#34;2&amp;#34;- record:slo:sli_error:ratio_rate30mexpr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[30m]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[30m])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:30mtier:&amp;#34;2&amp;#34;- record:slo:sli_error:ratio_rate1hexpr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[1h]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[1h])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:1htier:&amp;#34;2&amp;#34;- record:slo:sli_error:ratio_rate2hexpr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[2h]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[2h])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:2htier:&amp;#34;2&amp;#34;- record:slo:sli_error:ratio_rate6hexpr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[6h]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[6h])))labels:cmd:examplesgen.</description></item><item><title>Home WiFi</title><link>https://sloth.dev/examples/default/home-wifi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/home-wifi/</guid><description>SLO spec # This example shows a real service level used in my home to have SLOs on my wifi signal.# The metrics are extracted using unifi-poller (https://github.com/unifi-poller/unifi-poller)# that gets the information from an Ubiquiti Wifi installation.# https://community.ui.com/questions/satisfaction-percentage-in-client-properties-overview/8c940637-63d0-41de-a67b-8166cdd0ed32## The service level has 2 SLOs based on `client_satisfaction_ratio`, this is a ratio calculated# by ubiquiti that is based on wifi drop packages, wifi signal...# We conside an SLI event the client satisfactions that currently exist, lets review the SLOs## - `good-wifi-client-satisfaction`# - This SLO warn us that we don&amp;#39;t have a good wifi at home.</description></item><item><title>Kubernetes APIserver</title><link>https://sloth.dev/examples/default/kubernetes-apiserver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/kubernetes-apiserver/</guid><description>SLO spec # This example shows a real service level used for Kubernetes Apiserver.## The service level has 2 SLOs based on Apiserver requests/responses.## We consider an SLI event the the requests made to the server, lets review the SLOs## - `requests-availability`# - This SLO warn us that we are returning correctly the requests to the clients (kubectl users, controllers...).# - SLI error: We consider a bad request (event) a request with the codes &amp;gt;=500 or 429# - SLO objective (99.</description></item><item><title>Multi file</title><link>https://sloth.dev/examples/default/multifile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/multifile/</guid><description>SLO spec ---version:&amp;#34;prometheus/v1&amp;#34;service:&amp;#34;myservice&amp;#34;labels:owner:&amp;#34;myteam&amp;#34;repo:&amp;#34;myorg/myservice&amp;#34;tier:&amp;#34;2&amp;#34;slos:# We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).- name:&amp;#34;requests-availability&amp;#34;objective:99.9description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:events:error_query:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))total_query:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:# Overwrite default Sloth SLO alert summmary on ticket and page alerts.summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;page_alert:labels:severity:pageteamrouting_key:myteamticket_alert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34;---version:&amp;#34;prometheus/v1&amp;#34;service:&amp;#34;myservice2&amp;#34;labels:owner:&amp;#34;myteam2&amp;#34;repo:&amp;#34;myorg/myservice2&amp;#34;tier:&amp;#34;1&amp;#34;slos:# We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).- name:&amp;#34;requests-availability&amp;#34;objective:99.99description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:events:error_query:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))total_query:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:# Overwrite default Sloth SLO alert summmary on ticket and page alerts.</description></item><item><title>No alerts</title><link>https://sloth.dev/examples/default/no-alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/no-alerts/</guid><description>SLO spec # This example shows a real service level used for Kubernetes Apiserver.## The service level has 2 SLOs based on Apiserver requests/responses.## We consider an SLI event the the requests made to the server, lets review the SLOs## - `requests-availability`# - This SLO warn us that we are returning correctly the requests to the clients (kubectl users, controllers...).# - SLI error: We consider a bad request (event) a request with the codes &amp;gt;=500 or 429# - SLO objective (99.</description></item><item><title>Raw SLI</title><link>https://sloth.dev/examples/default/raw-sli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/raw-sli/</guid><description>SLO spec # This example shows another less accurate or simpler way of creating the home wifi SLO.## The metrics already give us a metric in ratio for each wifi connection satisfaction, instead of getting# good and bad events as connection with a minimum satisfaction ratio, we will calculate the averate of all# ratio satisfaction connections over the time window.# So we can&amp;#39;t use the `events` SLI because we are not going to divide bad and total events.</description></item><item><title>SLI plugin</title><link>https://sloth.dev/examples/default/sli-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/sli-plugin/</guid><description>SLO spec version:&amp;#34;prometheus/v1&amp;#34;service:&amp;#34;myservice&amp;#34;labels:owner:&amp;#34;myteam&amp;#34;repo:&amp;#34;myorg/myservice&amp;#34;tier:&amp;#34;2&amp;#34;slos:# We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).- name:&amp;#34;requests-availability&amp;#34;objective:99.9description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:plugin:id:&amp;#34;getting_started_availability&amp;#34;options:job:&amp;#34;myservice&amp;#34;filter:&amp;#39;f1=&amp;#34;v1&amp;#34;,f2=&amp;#34;v2&amp;#34;&amp;#39;alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:# Overwrite default Sloth SLO alert summmary on ticket and page alerts.summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;page_alert:labels:severity:pageteamrouting_key:myteamticket_alert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34; Generated ---# Code generated by Sloth (dev): https://github.com/slok/sloth.# DO NOT EDIT.groups:- name:sloth-slo-sli-recordings-myservice-requests-availabilityrules:- record:slo:sli_error:ratio_rate5mexpr:|-( sum(rate(http_request_duration_seconds_count{ f1=&amp;#34;v1&amp;#34;,f2=&amp;#34;v2&amp;#34;,job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34; }[5m])) / sum(rate(http_request_duration_seconds_count{ f1=&amp;#34;v1&amp;#34;,f2=&amp;#34;v2&amp;#34;,job=&amp;#34;myservice&amp;#34; }[5m])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:5mtier:&amp;#34;2&amp;#34;- record:slo:sli_error:ratio_rate30mexpr:|-( sum(rate(http_request_duration_seconds_count{ f1=&amp;#34;v1&amp;#34;,f2=&amp;#34;v2&amp;#34;,job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34; }[30m])) / sum(rate(http_request_duration_seconds_count{ f1=&amp;#34;v1&amp;#34;,f2=&amp;#34;v2&amp;#34;,job=&amp;#34;myservice&amp;#34; }[30m])))labels:cmd:examplesgen.</description></item></channel></rss>