<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenSLO on Sloth</title><link>https://sloth.dev/examples/openslo/</link><description>Recent content in OpenSLO on Sloth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sloth.dev/examples/openslo/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting started</title><link>https://sloth.dev/examples/openslo/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/openslo/getting-started/</guid><description>SLO spec # This example shows the same example as getting-started.yml but using OpenSLO spec.# It will generate the Prometheus rules in a Prometheus rules format.## `sloth generate -i ./examples/openslo-getting-started.yml`#apiVersion:openslo/v1alphakind:SLOmetadata:name:sloth-slo-my-servicedisplayName:Requests Availabilityspec:service:my-servicedescription:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;budgetingMethod:Occurrencesobjectives:- ratioMetrics:good:source:prometheusqueryType:promqlquery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code!~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))total:source:prometheusqueryType:promqlquery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))target:0.999timeWindows:- count:30unit:Day Generated ---# Code generated by Sloth (dev): https://github.com/slok/sloth.# DO NOT EDIT.groups:- name:sloth-slo-sli-recordings-my-service-sloth-slo-my-service-0rules:- record:slo:sli_error:ratio_rate5mexpr:|-( 1 - ( ( sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code!~&amp;#34;(5..|429)&amp;#34;}[5m])) ) / ( sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[5m])) ) ) )labels:cmd:examplesgen.shsloth_id:my-service-sloth-slo-my-service-0sloth_service:my-servicesloth_slo:sloth-slo-my-service-0sloth_window:5m- record:slo:sli_error:ratio_rate30mexpr:|-( 1 - ( ( sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code!</description></item><item><title>Kubernetes APIserver</title><link>https://sloth.dev/examples/openslo/kubernetes-apiserver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/openslo/kubernetes-apiserver/</guid><description>SLO spec # This example shows the same example as kubernetes-apiserver.yml but using OpenSLO spec.# It will generate the Prometheus rules in a Prometheus rules format.## Take into account that OpenSLO spec has the concept of single SLO with multiple objectives## `sloth generate -i ./examples/openslo-kubernetes-apiserver.yml`#apiVersion:openslo/v1alphakind:SLOmetadata:name:requests-availability-openslodisplayName:Requests Availabilityspec:service:k8s-apiserverdescription:&amp;#34;Apiserver are returning correctly the requests to the clients (kubectl users, controllers...).&amp;#34;budgetingMethod:Occurrencesobjectives:- ratioMetrics:good:source:prometheusqueryType:promqlquery:sum(rate(apiserver_request_total{code!~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))total:source:prometheusqueryType:promqlquery:sum(rate(apiserver_request_total[{{.window}}]))target:0.999timeWindows:- count:30unit:Day---apiVersion:openslo/v1alphakind:SLOmetadata:name:requests-latency-openslodisplayName:Requests Latencyspec:service:k8s-apiserverdescription:&amp;#34;Apiserver responses are being fast enough and this will affect the clients (kubectl users, controllers.</description></item></channel></rss>