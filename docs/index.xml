<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sloth</title><link>https://sloth.dev/</link><description>Recent content on Sloth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sloth.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>CLI generate</title><link>https://sloth.dev/usage/cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/usage/cli/</guid><description>generate will generate Prometheus rules in different formats based on the specs.
This mode only needs the CLI so its very useful for GitOps, CI, scripts or as a CLI on your toolbox.
generate command supports multiple spec types and will detect the input spec type based on the spec, accordingly it will generate the output in different formats depending on the loaded spec:
Default spec generates vanilla Prometheus rules.</description></item><item><title>Default (prometheus/v1)</title><link>https://sloth.dev/specs/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/specs/default/</guid><description>Only CLI, Not Kubernetes compatible
This spec can&amp;rsquo;t be used with Kubernetes CRDs, use Kubernetes spec instead. This is the default format for Sloth, doesn&amp;rsquo;t depend on Kubernetes CRDs or anything.
Normally this format is used when the integration you want is a vanilla Prometheus integration with raw Prometheus rules, so, this will generate the prometheus recording and alerting rules in Standard Prometheus YAML format.
Spec Examples CLI Example:</description></item><item><title>Features</title><link>https://sloth.dev/introduction/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/introduction/features/</guid><description>Simple, maintainable and understandable SLO spec. Reliable SLO metrics and alerts. Based on Google SLO implementation and multi window multi burn alerts framework. Autogenerates Prometheus SLI recording rules in different time windows. Autogenerates Prometheus SLO metadata rules. Autogenerates Prometheus SLO multi window multi burn alert rules (Page and warning). SLO spec validation (including validate command for Gitops and CI). Customization of labels, disabling different type of alerts&amp;hellip; A single way (uniform) of creating SLOs across all different services and teams.</description></item><item><title>Kubernetes (CRD)</title><link>https://sloth.dev/specs/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/specs/kubernetes/</guid><description>CLI compatible
This spec can be used in the same way the default spec is used with the CLI. Kubernetes compatible
This spec can be used as a Kubernetes resource using CR (needs CRD registered on Kubernetes APIserver). Kubernetes format means that the SLOs use a Kubernetes style spec. Is very similar to the default one, except that this format can be used in two ways, the regular CLI mode, and in Kubernetes controller mode using CRs.</description></item><item><title>Kubernetes controller</title><link>https://sloth.dev/usage/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/usage/kubernetes/</guid><description>kubernetes-controller command runs Sloth as a controller/operator that will react on sloth.slok.dev/v1/PrometheusServiceLevel CRD.
In the controller mode, Sloth will be running listneing to Kubernetes Sloth SLO CR events and generate the required prometheus-operator CR rules
In the end, the controller mode makes the same work as the CLI however integrates better with a native Kubernetes flow.
Sloth CRD is required
Example:
$ kubectl apply -f ./pkg/kubernetes/gen/crd/sloth.slok.dev_prometheusservicelevels.yaml Prometheus Operator Rules CRD is required</description></item><item><title>SLI plugins</title><link>https://sloth.dev/usage/plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/usage/plugins/</guid><description>SLI plugins are small Go plugins (using Yaegi) that can be loaded on Sloth start.
These plugins can be referenced as an SLI on the SLO specs and will return a raw SLI type.
Common plugins Sloth maintains a library with common SLI plugins that can be used on your SLOs or used as examples to develop your own ones.
Check plugins source code here. Check the documentation here.</description></item><item><title>SLO validation</title><link>https://sloth.dev/usage/slo-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/usage/slo-validation/</guid><description>Sloth validates the spec on generation, however, on specific steps of the SLO generation process, we only want to validate a group of SLOs.
For this purpose Sloth comes with a helpful command called validate. It will discover all the specs recursively and apply the same generation process as generate (including plugins, options&amp;hellip;) but discarding the result.
Example that validates all SLOs in a directory (including subdirectories) and excludes all in spec files that match _gen in the spec path.</description></item><item><title>Installing Sloth</title><link>https://sloth.dev/introduction/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/introduction/install/</guid><description>Releases Get binary releases from https://github.com/slok/sloth/releases
Docker images Official multi arch docker images in dockerhub.
docker pull slok/sloth Building from source code Clone the repository and build:
git clone git@github.com:slok/sloth.git &amp;amp;&amp;amp; \ cd ./sloth &amp;amp;&amp;amp; \ make build &amp;amp;&amp;amp; \ ls -la ./bin Kubernetes Helm chart Raw Kubernetes manifests without common SLI plugins Raw Kubernetes manifests with common SLI plugins Kustomize</description></item><item><title>OpenSLO</title><link>https://sloth.dev/specs/openslo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/specs/openslo/</guid><description>Only CLI, Not Kubernetes compatible
This spec can&amp;rsquo;t be used with Kubernetes CRDs, use Kubernetes spec instead. Sloth supports OpenSLO v1alpha spec, however we need to take into account that it has some restrictions:
OpenSLO time window restricted to 30 days. Only Objective ratio metrics are supported. Only Prometheus and PromQL query types are supported. Configuration fields not required by Sloth will be ignored. Regarding Sloth features, OpenSLO spec doesn&amp;rsquo;t support all of the sloth features:</description></item><item><title>Getting started</title><link>https://sloth.dev/examples/default/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/getting-started/</guid><description>SLO spec version:&amp;#34;prometheus/v1&amp;#34;service:&amp;#34;myservice&amp;#34;labels:owner:&amp;#34;myteam&amp;#34;repo:&amp;#34;myorg/myservice&amp;#34;tier:&amp;#34;2&amp;#34;slos:# We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).- name:&amp;#34;requests-availability&amp;#34;objective:99.9description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:events:error_query:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))total_query:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:# Overwrite default Sloth SLO alert summmary on ticket and page alerts.summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;page_alert:labels:severity:pageteamrouting_key:myteamticket_alert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34; Generated ---# Code generated by Sloth (dev): https://github.com/slok/sloth.# DO NOT EDIT.groups:- name:sloth-slo-sli-recordings-myservice-requests-availabilityrules:- record:slo:sli_error:ratio_rate5mexpr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[5m]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[5m])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:5mtier:&amp;#34;2&amp;#34;- record:slo:sli_error:ratio_rate30mexpr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[30m]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[30m])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:30mtier:&amp;#34;2&amp;#34;- record:slo:sli_error:ratio_rate1hexpr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[1h]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[1h])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:1htier:&amp;#34;2&amp;#34;- record:slo:sli_error:ratio_rate2hexpr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[2h]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[2h])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:2htier:&amp;#34;2&amp;#34;- record:slo:sli_error:ratio_rate6hexpr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[6h]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[6h])))labels:cmd:examplesgen.</description></item><item><title>Getting started</title><link>https://sloth.dev/examples/kubernetes/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/kubernetes/getting-started/</guid><description>SLO spec # This example shows the same example as getting-started.yml but using Sloth Kubernetes CRD.# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.## `sloth generate -i ./examples/k8s-getting-started.yml`#apiVersion:sloth.slok.dev/v1kind:PrometheusServiceLevelmetadata:name:sloth-slo-my-servicenamespace:monitoringspec:service:&amp;#34;myservice&amp;#34;labels:owner:&amp;#34;myteam&amp;#34;repo:&amp;#34;myorg/myservice&amp;#34;tier:&amp;#34;2&amp;#34;slos:- name:&amp;#34;requests-availability&amp;#34;objective:99.9description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:events:errorQuery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))totalQuery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;pageAlert:labels:severity:pageteamrouting_key:myteamticketAlert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34; Generated ---# Code generated by Sloth (dev): https://github.com/slok/sloth.# DO NOT EDIT.apiVersion:monitoring.coreos.com/v1kind:PrometheusRulemetadata:creationTimestamp:nulllabels:app.kubernetes.io/component:SLOapp.kubernetes.io/managed-by:slothname:sloth-slo-my-servicenamespace:monitoringspec:groups:- name:sloth-slo-sli-recordings-myservice-requests-availabilityrules:- expr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[5m]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[5m])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:5mtier:&amp;#34;2&amp;#34;record:slo:sli_error:ratio_rate5m- expr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[30m]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[30m])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:30mtier:&amp;#34;2&amp;#34;record:slo:sli_error:ratio_rate30m- expr:|(sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[1h]))) / (sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[1h])))labels:cmd:examplesgen.</description></item><item><title>Getting started</title><link>https://sloth.dev/examples/openslo/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/openslo/getting-started/</guid><description>SLO spec # This example shows the same example as getting-started.yml but using OpenSLO spec.# It will generate the Prometheus rules in a Prometheus rules format.## `sloth generate -i ./examples/openslo-getting-started.yml`#apiVersion:openslo/v1alphakind:SLOmetadata:name:sloth-slo-my-servicedisplayName:Requests Availabilityspec:service:my-servicedescription:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;budgetingMethod:Occurrencesobjectives:- ratioMetrics:good:source:prometheusqueryType:promqlquery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code!~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))total:source:prometheusqueryType:promqlquery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))target:0.999timeWindows:- count:30unit:Day Generated ---# Code generated by Sloth (dev): https://github.com/slok/sloth.# DO NOT EDIT.groups:- name:sloth-slo-sli-recordings-my-service-sloth-slo-my-service-0rules:- record:slo:sli_error:ratio_rate5mexpr:|-( 1 - ( ( sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code!~&amp;#34;(5..|429)&amp;#34;}[5m])) ) / ( sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[5m])) ) ) )labels:cmd:examplesgen.shsloth_id:my-service-sloth-slo-my-service-0sloth_service:my-servicesloth_slo:sloth-slo-my-service-0sloth_window:5m- record:slo:sli_error:ratio_rate30mexpr:|-( 1 - ( ( sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code!</description></item><item><title>Home WiFi</title><link>https://sloth.dev/examples/default/home-wifi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/home-wifi/</guid><description>SLO spec # This example shows a real service level used in my home to have SLOs on my wifi signal.# The metrics are extracted using unifi-poller (https://github.com/unifi-poller/unifi-poller)# that gets the information from an Ubiquiti Wifi installation.# https://community.ui.com/questions/satisfaction-percentage-in-client-properties-overview/8c940637-63d0-41de-a67b-8166cdd0ed32## The service level has 2 SLOs based on `client_satisfaction_ratio`, this is a ratio calculated# by ubiquiti that is based on wifi drop packages, wifi signal...# We conside an SLI event the client satisfactions that currently exist, lets review the SLOs## - `good-wifi-client-satisfaction`# - This SLO warn us that we don&amp;#39;t have a good wifi at home.</description></item><item><title>Home WiFi</title><link>https://sloth.dev/examples/kubernetes/home-wifi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/kubernetes/home-wifi/</guid><description>SLO spec # This example shows the same example as home-wifi.yml but using Sloth Kubernetes CRD.# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.## `sloth generate -i ./examples/k8s-home-wifi.yml`#apiVersion:sloth.slok.dev/v1kind:PrometheusServiceLevelmetadata:name:sloth-slo-home-wifinamespace:monitoringlabels:prometheus:prometheusrole:alert-rulesapp:slothspec:service:&amp;#34;home-wifi&amp;#34;labels:cluster:&amp;#34;valhalla&amp;#34;component:&amp;#34;ubiquiti&amp;#34;context:&amp;#34;home&amp;#34;slos:- name:&amp;#34;good-wifi-client-satisfaction&amp;#34;objective:95description:&amp;#34;Will warn us that we don&amp;#39;t have a good wifi at home.&amp;#34;sli:events:errorQuery:sum_over_time((count(unifipoller_client_satisfaction_ratio &amp;lt; 0.75))[{{.window}}:]) OR on() vector(0)totalQuery:sum_over_time((count(unifipoller_client_satisfaction_ratio))[{{.window}}:])alerting:name:GoodWifiClientSatisfactionpageAlert:labels:severity:hometicketAlert:labels:severity:warning- name:&amp;#34;risk-wifi-client-satisfaction&amp;#34;objective:99.9description:&amp;#34;Will warn us that we something very bad is happenning with our home wifi.&amp;#34;sli:events:errorQuery:sum_over_time((count(unifipoller_client_satisfaction_ratio &amp;lt; 0.5))[{{.window}}:]) OR on() vector(0)totalQuery:sum_over_time((count(unifipoller_client_satisfaction_ratio))[{{.window}}:])alerting:name:RiskWifiClientSatisfactionpageAlert:labels:severity:hometicketAlert:labels:severity:warning Generated ---# Code generated by Sloth (dev): https://github.</description></item><item><title>Kubernetes APIserver</title><link>https://sloth.dev/examples/default/kubernetes-apiserver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/kubernetes-apiserver/</guid><description>SLO spec # This example shows a real service level used for Kubernetes Apiserver.## The service level has 2 SLOs based on Apiserver requests/responses.## We consider an SLI event the the requests made to the server, lets review the SLOs## - `requests-availability`# - This SLO warn us that we are returning correctly the requests to the clients (kubectl users, controllers...).# - SLI error: We consider a bad request (event) a request with the codes &amp;gt;=500 or 429# - SLO objective (99.</description></item><item><title>Kubernetes APIserver</title><link>https://sloth.dev/examples/openslo/kubernetes-apiserver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/openslo/kubernetes-apiserver/</guid><description>SLO spec # This example shows the same example as kubernetes-apiserver.yml but using OpenSLO spec.# It will generate the Prometheus rules in a Prometheus rules format.## Take into account that OpenSLO spec has the concept of single SLO with multiple objectives## `sloth generate -i ./examples/openslo-kubernetes-apiserver.yml`#apiVersion:openslo/v1alphakind:SLOmetadata:name:requests-availability-openslodisplayName:Requests Availabilityspec:service:k8s-apiserverdescription:&amp;#34;Apiserver are returning correctly the requests to the clients (kubectl users, controllers...).&amp;#34;budgetingMethod:Occurrencesobjectives:- ratioMetrics:good:source:prometheusqueryType:promqlquery:sum(rate(apiserver_request_total{code!~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))total:source:prometheusqueryType:promqlquery:sum(rate(apiserver_request_total[{{.window}}]))target:0.999timeWindows:- count:30unit:Day---apiVersion:openslo/v1alphakind:SLOmetadata:name:requests-latency-openslodisplayName:Requests Latencyspec:service:k8s-apiserverdescription:&amp;#34;Apiserver responses are being fast enough and this will affect the clients (kubectl users, controllers.</description></item><item><title>Multi file</title><link>https://sloth.dev/examples/default/multifile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/multifile/</guid><description>SLO spec ---version:&amp;#34;prometheus/v1&amp;#34;service:&amp;#34;myservice&amp;#34;labels:owner:&amp;#34;myteam&amp;#34;repo:&amp;#34;myorg/myservice&amp;#34;tier:&amp;#34;2&amp;#34;slos:# We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).- name:&amp;#34;requests-availability&amp;#34;objective:99.9description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:events:error_query:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))total_query:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:# Overwrite default Sloth SLO alert summmary on ticket and page alerts.summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;page_alert:labels:severity:pageteamrouting_key:myteamticket_alert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34;---version:&amp;#34;prometheus/v1&amp;#34;service:&amp;#34;myservice2&amp;#34;labels:owner:&amp;#34;myteam2&amp;#34;repo:&amp;#34;myorg/myservice2&amp;#34;tier:&amp;#34;1&amp;#34;slos:# We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).- name:&amp;#34;requests-availability&amp;#34;objective:99.99description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:events:error_query:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))total_query:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:# Overwrite default Sloth SLO alert summmary on ticket and page alerts.</description></item><item><title>Multi file</title><link>https://sloth.dev/examples/kubernetes/multifile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/kubernetes/multifile/</guid><description>SLO spec ---# This example shows the same example as getting-started.yml but using Sloth Kubernetes CRD and multifile.# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.## `sloth generate -i ./examples/k8s-multifile.yml`#apiVersion:sloth.slok.dev/v1kind:PrometheusServiceLevelmetadata:name:sloth-slo-my-servicenamespace:monitoringspec:service:&amp;#34;myservice&amp;#34;labels:owner:&amp;#34;myteam&amp;#34;repo:&amp;#34;myorg/myservice&amp;#34;tier:&amp;#34;2&amp;#34;slos:- name:&amp;#34;requests-availability&amp;#34;objective:99.9description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:events:errorQuery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))totalQuery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;pageAlert:labels:severity:pageteamrouting_key:myteamticketAlert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34;---apiVersion:sloth.slok.dev/v1kind:PrometheusServiceLevelmetadata:name:sloth-slo-my-service2namespace:monitoringspec:service:&amp;#34;myservice2&amp;#34;labels:owner:&amp;#34;myteam2&amp;#34;repo:&amp;#34;myorg/myservice2&amp;#34;tier:&amp;#34;1&amp;#34;slos:- name:&amp;#34;requests-availability&amp;#34;objective:99.99description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:events:errorQuery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34;}[{{.window}}]))totalQuery:sum(rate(http_request_duration_seconds_count{job=&amp;#34;myservice&amp;#34;}[{{.window}}]))alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;pageAlert:labels:severity:pageteamrouting_key:myteamticketAlert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34; Generated ---# Code generated by Sloth (dev): https://github.</description></item><item><title>No alerts</title><link>https://sloth.dev/examples/default/no-alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/no-alerts/</guid><description>SLO spec # This example shows a real service level used for Kubernetes Apiserver.## The service level has 2 SLOs based on Apiserver requests/responses.## We consider an SLI event the the requests made to the server, lets review the SLOs## - `requests-availability`# - This SLO warn us that we are returning correctly the requests to the clients (kubectl users, controllers...).# - SLI error: We consider a bad request (event) a request with the codes &amp;gt;=500 or 429# - SLO objective (99.</description></item><item><title>Raw SLI</title><link>https://sloth.dev/examples/default/raw-sli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/raw-sli/</guid><description>SLO spec # This example shows another less accurate or simpler way of creating the home wifi SLO.## The metrics already give us a metric in ratio for each wifi connection satisfaction, instead of getting# good and bad events as connection with a minimum satisfaction ratio, we will calculate the averate of all# ratio satisfaction connections over the time window.# So we can&amp;#39;t use the `events` SLI because we are not going to divide bad and total events.</description></item><item><title>SLI plugin</title><link>https://sloth.dev/examples/default/sli-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/default/sli-plugin/</guid><description>SLO spec version:&amp;#34;prometheus/v1&amp;#34;service:&amp;#34;myservice&amp;#34;labels:owner:&amp;#34;myteam&amp;#34;repo:&amp;#34;myorg/myservice&amp;#34;tier:&amp;#34;2&amp;#34;slos:# We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).- name:&amp;#34;requests-availability&amp;#34;objective:99.9description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:plugin:id:&amp;#34;getting_started_availability&amp;#34;options:job:&amp;#34;myservice&amp;#34;filter:&amp;#39;f1=&amp;#34;v1&amp;#34;,f2=&amp;#34;v2&amp;#34;&amp;#39;alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:# Overwrite default Sloth SLO alert summmary on ticket and page alerts.summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;page_alert:labels:severity:pageteamrouting_key:myteamticket_alert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34; Generated ---# Code generated by Sloth (dev): https://github.com/slok/sloth.# DO NOT EDIT.groups:- name:sloth-slo-sli-recordings-myservice-requests-availabilityrules:- record:slo:sli_error:ratio_rate5mexpr:|-( sum(rate(http_request_duration_seconds_count{ f1=&amp;#34;v1&amp;#34;,f2=&amp;#34;v2&amp;#34;,job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34; }[5m])) / sum(rate(http_request_duration_seconds_count{ f1=&amp;#34;v1&amp;#34;,f2=&amp;#34;v2&amp;#34;,job=&amp;#34;myservice&amp;#34; }[5m])))labels:cmd:examplesgen.showner:myteamrepo:myorg/myservicesloth_id:myservice-requests-availabilitysloth_service:myservicesloth_slo:requests-availabilitysloth_window:5mtier:&amp;#34;2&amp;#34;- record:slo:sli_error:ratio_rate30mexpr:|-( sum(rate(http_request_duration_seconds_count{ f1=&amp;#34;v1&amp;#34;,f2=&amp;#34;v2&amp;#34;,job=&amp;#34;myservice&amp;#34;,code=~&amp;#34;(5..|429)&amp;#34; }[30m])) / sum(rate(http_request_duration_seconds_count{ f1=&amp;#34;v1&amp;#34;,f2=&amp;#34;v2&amp;#34;,job=&amp;#34;myservice&amp;#34; }[30m])))labels:cmd:examplesgen.</description></item><item><title>SLI plugin</title><link>https://sloth.dev/examples/kubernetes/sli-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sloth.dev/examples/kubernetes/sli-plugin/</guid><description>SLO spec # This example shows the same example as home-wifi.yml but using Sloth Kubernetes CRD.# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.## `sloth generate -i ./examples/plugin-k8s-home-wifi.yml` -p ./examples#apiVersion:sloth.slok.dev/v1kind:PrometheusServiceLevelmetadata:name:sloth-slo-home-wifinamespace:monitoringlabels:prometheus:prometheusrole:alert-rulesapp:slothspec:service:&amp;#34;myservice&amp;#34;labels:owner:&amp;#34;myteam&amp;#34;repo:&amp;#34;myorg/myservice&amp;#34;tier:&amp;#34;2&amp;#34;slos:# We allow failing (5xx and 429) 1 request every 1000 requests (99.9%).- name:&amp;#34;requests-availability&amp;#34;objective:99.9description:&amp;#34;Common SLO based on availability for HTTP request responses.&amp;#34;sli:plugin:id:&amp;#34;getting_started_availability&amp;#34;options:job:&amp;#34;myservice&amp;#34;filter:&amp;#39;f1=&amp;#34;v1&amp;#34;,f2=&amp;#34;v2&amp;#34;&amp;#39;alerting:name:MyServiceHighErrorRatelabels:category:&amp;#34;availability&amp;#34;annotations:# Overwrite default Sloth SLO alert summmary on ticket and page alerts.summary:&amp;#34;High error rate on &amp;#39;myservice&amp;#39; requests responses&amp;#34;page_alert:labels:severity:pageteamrouting_key:myteamticket_alert:labels:severity:&amp;#34;slack&amp;#34;slack_channel:&amp;#34;#alerts-myteam&amp;#34; Generated ---# Code generated by Sloth (dev): https://github.</description></item></channel></rss>